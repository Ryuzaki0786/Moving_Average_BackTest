import streamlit as st
import pandas as pd
import csv
import datetime as dt
import yfinance as yf
import matplotlib.pyplot as plt
from Moving_Avg import read_prices, moving_average, generate_signals, backtest

# --- Explanation of the Backtest Workflow ---
#
# 1. The user selects moving average windows and initial capital in the sidebar.
# 2. The app loads historical price data from 'AAPL.csv'.
# 3. It calculates short and long moving averages using the selected window sizes.
# 4. Trading signals are generated by comparing the short and long moving averages:
#    - Buy (1) when short MA crosses above long MA and not already in position.
#    - Sell (-1) when short MA crosses below long MA and currently in position.
#    - Hold (0) otherwise.
# 5. The backtest simulates trading using these signals and tracks portfolio value over time (the equity curve).
# 6. The app trims the DataFrame to match the equity curve length, so dates and equity values are aligned.
# 7. It displays price, moving averages, signals, and the equity curve using matplotlib charts.
# 8. The last 10 rows of the results are shown for review.

st.title("Moving Average Backtest with Equity Curve")


#------Side Bar------
ticker = st.sidebar.text_input("Enter Stock Ticker", "AAPL")
start = st.sidebar.date_input("Start Date", value = pd.to_datetime("2010-01-01"))
end = st.sidebar.date_input("End Date", value = pd.to_datetime("2024-12-31"))
short_ma = st.sidebar.slider("Short Moving Average Window", 5, 50, 20)
# st.sidebar.slider(
#     label="Short MA",  # Text label shown in the sidebar
#     min_value=5,       # Minimum value of slider
#     max_value=50,      # Maximum value of slider
#     value=20           # Default value when app loads
# )
long_ma = st.sidebar.slider("Long Moving Average Window", 10, 200, 50)
initial_capital = st.sidebar.number_input("Initial Capital", min_value=1000, max_value=10000000, value=1000000)

if(st.sidebar.button("Run Backtest")):
    # Download data
    df = pd.read_csv("AAPL.csv", parse_dates=True, index_col='Date')
    # Calculate moving averages
    df['short_ma'] = df['Close'].rolling(window=short_ma).mean()
    df['long_ma'] = df['Close'].rolling(window=long_ma).mean()

# Generate signals using the moving average lists
    df['signal'] = generate_signals(df['short_ma'].tolist(), df['long_ma'].tolist())

    closes = df['Close'].dropna().tolist()
    signals = df['signal'].dropna().tolist()
    equity = backtest(closes, signals, initial_capital)
    
    # Match the length of the DataFrame with the equity list
# This is needed because moving averages introduce NaNs at the start,
# so our backtest (and equity list) starts later than the full data.
# We trim the DataFrame to the last N rows, where N = length of equity,
# to correctly align equity values with their corresponding dates.
    df = df.iloc[-len(equity):]
    df['Equity'] = equity

    st.subheader("Price and Signals");
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(df['Close'], label='Close Price', color='blue')
    ax.plot(df['short_ma'], label=f'Short MA ({short_ma})', color='orange')
    ax.plot(df['long_ma'], label=f'Long MA ({long_ma})', color='green')
    ax.legend()
    st.pyplot(fig)

    st.subheader("Equity Curve")
    fig2, ax2 = plt.subplots(figsize=(12, 4))
    ax2.plot(df.index, df['Equity'], label='Equity Curve', color='purple')
    ax2.set_title('Equity Curve')
    ax2.set_xlabel('Date')
    ax2.set_ylabel('Portfolio Value')
    ax2.legend()
    st.pyplot(fig2)

    st.subheader("Backtest Results")
    
    st.dataframe(df.tail(10))  # Show last 10 rows of DataFrame
                                                         
